--
-- PostgreSQL database dump
--

-- Dumped from database version 11.22 (Raspbian 11.22-0+deb10u2)
-- Dumped by pg_dump version 11.22 (Raspbian 11.22-0+deb10u2)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: battlelog; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.battlelog (
    battle_id integer NOT NULL,
    initiator_id bigint NOT NULL,
    opponent_id bigint NOT NULL,
    result integer NOT NULL
);


--
-- Name: COLUMN battlelog.result; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.battlelog.result IS '0 - Initiator hat verloren
1 - unentschieden
2 - Initiator hat gewonnen';


--
-- Name: Battlelog_battle_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.battlelog ALTER COLUMN battle_id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."Battlelog_battle_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: location; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.location (
    loc_id integer NOT NULL,
    loc_name character varying(30) NOT NULL,
    loc_level integer DEFAULT 1 NOT NULL,
    loc_description text
);


--
-- Name: Location_loc_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.location ALTER COLUMN loc_id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public."Location_loc_id_seq"
    START WITH 0
    INCREMENT BY 1
    MINVALUE 0
    NO MAXVALUE
    CACHE 1
);


--
-- Name: attack; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.attack (
    attack_id integer NOT NULL,
    name character varying(20),
    description text,
    can_crit boolean DEFAULT false NOT NULL,
    can_pierce boolean DEFAULT false NOT NULL,
    mana_cost integer
);


--
-- Name: attack_attack_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.attack ALTER COLUMN attack_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.attack_attack_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: attack_pool; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.attack_pool (
    attack_pool_id integer NOT NULL,
    attack_pool_name character varying(15) DEFAULT 'unnamed pool'::character varying
);


--
-- Name: TABLE attack_pool; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.attack_pool IS 'Objects in this table are used to reference a group of attacks. A class can have multiple attack pools and attack pools are not bound to a class.';


--
-- Name: attack_pool_attack_pool_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.attack_pool ALTER COLUMN attack_pool_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.attack_pool_attack_pool_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: attack_pool_contains_attack; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.attack_pool_contains_attack (
    attack_pool_id integer NOT NULL,
    attack_id integer NOT NULL
);


--
-- Name: attack_scales_with; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.attack_scales_with (
    attack_id integer NOT NULL,
    stat_id integer NOT NULL,
    damage_type integer NOT NULL,
    factor double precision
);


--
-- Name: COLUMN attack_scales_with.damage_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.attack_scales_with.damage_type IS '0 - physical
1 - magical';


--
-- Name: character; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public."character" (
    user_id bigint NOT NULL,
    user_level integer DEFAULT 1 NOT NULL,
    user_name character varying(15) NOT NULL,
    located integer DEFAULT 0 NOT NULL,
    class integer DEFAULT 0 NOT NULL,
    user_level_progression integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE "character"; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public."character" IS 'User duh';


--
-- Name: class; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.class (
    class_id integer DEFAULT 0 NOT NULL,
    class_name character varying(30) NOT NULL,
    class_description text
);


--
-- Name: class_uses_attack_pool; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.class_uses_attack_pool (
    class_id integer NOT NULL,
    attack_pool_id integer NOT NULL
);


--
-- Name: TABLE class_uses_attack_pool; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.class_uses_attack_pool IS 'Holds all the class-attack pool relations';


--
-- Name: class_full_attack_pool; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.class_full_attack_pool AS
 WITH general_pool AS (
         SELECT p.attack_pool_id
           FROM public.attack_pool p
          WHERE ((p.attack_pool_name)::text = 'General'::text)
        ), combined AS (
         SELECT cp.class_id,
            pa.attack_id
           FROM (public.class_uses_attack_pool cp
             JOIN public.attack_pool_contains_attack pa ON ((pa.attack_pool_id = cp.attack_pool_id)))
        UNION ALL
         SELECT cp.class_id,
            pa.attack_id
           FROM ((( SELECT DISTINCT class_uses_attack_pool.class_id
                   FROM public.class_uses_attack_pool) cp
             CROSS JOIN general_pool gp)
             JOIN public.attack_pool_contains_attack pa ON ((pa.attack_pool_id = gp.attack_pool_id)))
        )
 SELECT combined.class_id,
    combined.attack_id
   FROM combined
  ORDER BY combined.class_id, combined.attack_id;


--
-- Name: has; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.has (
    stat_id integer NOT NULL,
    item_id integer NOT NULL,
    amount integer
);


--
-- Name: TABLE has; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.has IS 'has Stats';


--
-- Name: item; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.item (
    item_id integer NOT NULL,
    item_name character varying(30) NOT NULL,
    item_description text,
    item_level integer DEFAULT 1 NOT NULL,
    equippable integer NOT NULL,
    item_rarity integer
);


--
-- Name: COLUMN item.equippable; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.item.equippable IS '0 - not equippable 
1 - head
2 - body
3 - legs and shoes';


--
-- Name: item_rarity; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.item_rarity (
    rarity_id integer NOT NULL,
    name character varying(20),
    drop_factor double precision
);


--
-- Name: item_rarity_rarity_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.item_rarity ALTER COLUMN rarity_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.item_rarity_rarity_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: stats; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.stats (
    stat_id integer NOT NULL,
    stat_name character varying(25) NOT NULL,
    stat_description text NOT NULL
);


--
-- Name: item_stat_overview; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.item_stat_overview AS
 SELECT i.item_name AS item,
    i.equippable AS slot,
    s.stat_name AS stat,
    has.amount,
    i.item_level AS level,
    i.item_rarity AS rarity
   FROM ((public.has
     JOIN public.stats s USING (stat_id))
     JOIN public.item i USING (item_id))
  ORDER BY i.item_level, i.item_rarity, has.item_id, has.stat_id;


--
-- Name: owns; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.owns (
    item_id integer NOT NULL,
    user_id bigint NOT NULL,
    item_amount integer DEFAULT 1 NOT NULL,
    equipped boolean
);


--
-- Name: stats_stat_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.stats ALTER COLUMN stat_id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.stats_stat_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: user_current_stats; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.user_current_stats AS
 SELECT "character".user_id,
    "character".user_name,
    s.stat_id,
    s.stat_name,
    sum((h.amount * o.item_amount)) AS sum
   FROM ((((public."character"
     JOIN public.owns o USING (user_id))
     JOIN public.item i ON (((o.item_id = i.item_id) AND ((i.equippable = 0) OR o.equipped) AND (i.item_level <= "character".user_level))))
     JOIN public.has h ON ((h.item_id = i.item_id)))
     JOIN public.stats s ON ((s.stat_id = h.stat_id)))
  GROUP BY "character".user_id, "character".user_name, s.stat_id, s.stat_name
  ORDER BY "character".user_id, s.stat_id;


--
-- Name: user_information; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.user_information AS
 SELECT "character".user_id,
    "character".user_name,
    location.loc_id,
    location.loc_name,
    class.class_id,
    class.class_name
   FROM ((public."character"
     JOIN public.location ON (("character".located = location.loc_id)))
     JOIN public.class ON (("character".class = class.class_id)));


--
-- Name: user_inventory; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.user_inventory AS
 SELECT owns.user_id,
    "character".user_name,
    owns.item_id,
    item.item_name,
    owns.item_amount
   FROM ((public.owns
     JOIN public."character" USING (user_id))
     JOIN public.item USING (item_id))
  ORDER BY "character".user_name, item.item_name;


--
-- Name: user_locations; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.user_locations AS
 SELECT "character".user_id,
    "character".user_name,
    location.loc_id,
    location.loc_name
   FROM (public."character"
     JOIN public.location ON (("character".located = location.loc_id)));


--
-- Name: valid_item_pools; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.valid_item_pools AS
 SELECT u.user_id,
    u.user_name,
    i.item_id,
    i.item_name,
    i.item_level,
    r.drop_factor,
    (i.item_level - location.loc_level) AS level_diff,
    o.item_amount,
    i.item_description
   FROM ((((public.location
     JOIN public."character" u ON ((u.located = location.loc_id)))
     JOIN public.item i ON (((i.item_level <= (location.loc_level + 1)) AND (i.item_level >= (location.loc_level - 2)))))
     LEFT JOIN public.owns o ON (((o.user_id = u.user_id) AND (o.item_id = i.item_id))))
     JOIN public.item_rarity r ON ((r.rarity_id = i.item_rarity)))
  WHERE ((i.equippable = 0) OR (NOT (o.item_amount > 0)) OR (o.item_amount IS NULL));


--
-- Data for Name: attack; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.attack (attack_id, name, description, can_crit, can_pierce, mana_cost) FROM stdin;
0	Slash	Deal some damage to your foe with your fist or primary weapon.	f	t	0
1	Curse	Dominate your foe with your mental supremacy	f	f	0
2	Heavy Hit	Stab your weapon into the enemy using your own kinetic energy	f	t	0
3	Threaded Volley	Throw a salve of.. *something..* on your foe. Seems to weaken the ground.	f	f	0
4	Arcane Trap	Let the energy of the Arcana flow though you and burst into your enemy.	t	t	0
\.


--
-- Data for Name: attack_pool; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.attack_pool (attack_pool_id, attack_pool_name) FROM stdin;
19	General
20	Fighter
21	Wizard
22	Sprit
23	Hunter
24	Enchant
25	Traditional
26	Rebel
27	Resistance
\.


--
-- Data for Name: attack_pool_contains_attack; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.attack_pool_contains_attack (attack_pool_id, attack_id) FROM stdin;
19	0
19	1
19	2
19	3
19	4
\.


--
-- Data for Name: attack_scales_with; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.attack_scales_with (attack_id, stat_id, damage_type, factor) FROM stdin;
0	8	0	0.650000000000000022
0	17	0	0.550000000000000044
0	16	0	0.400000000000000022
1	12	1	0.949999999999999956
1	13	1	0.299999999999999989
1	10	1	0.25
1	18	1	0.100000000000000006
2	9	0	1
2	8	0	0.149999999999999994
2	14	0	0.450000000000000011
3	11	0	0.699999999999999956
3	8	0	0.299999999999999989
3	18	0	0.149999999999999994
3	12	1	0.299999999999999989
3	18	1	0.149999999999999994
4	12	1	0.599999999999999978
4	19	1	0.599999999999999978
4	15	1	0.299999999999999989
4	14	1	0.200000000000000011
\.


--
-- Data for Name: class; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.class (class_id, class_name, class_description) FROM stdin;
1	Warrior	A strong and brave fighter skilled with melee weapons, excelling in close combat. Warriors rely on their strength and endurance to overpower enemies and protect allies on the battlefield.
2	Mage	A master of magical arts, able to cast powerful spells to damage enemies, protect allies, and alter reality. Mages draw upon their deep knowledge of arcane lore to perform their feats.
3	Rogue	A stealthy and agile character, proficient in sneaking, lock-picking, and backstabbing. Rogues rely on their dexterity and cunning to avoid detection and strike at the most opportune moments.
4	Cleric	A devout healer who uses divine magic to aid allies and smite foes. Clerics channel the power of their deities to heal wounds, remove curses, and protect their comrades from harm.
5	Ranger	A skilled hunter and tracker, adept with bows and survival skills. Rangers are at home in the wilderness, where they use their keen senses and knowledge of nature to track enemies and lay traps.
6	Paladin	A holy warrior who fights for justice and righteousness. Paladins are bound by a sacred oath to uphold the tenets of their faith, using their divine powers to heal, protect, and deliver justice.
7	Bard	A charismatic performer whose music and stories inspire allies and confound enemies. Bards use their talents to cast spells, heal, and provide support to their companions, often turning the tide of battle with a well-placed song.
8	Monk	A disciplined martial artist who uses unarmed combat and spiritual powers. Monks harness their inner energy, known as ki, to perform extraordinary feats of agility and strength, often striking faster than the eye can see.
9	Druid	A nature priest who can shapeshift and control natural forces. Druids maintain a deep connection with the natural world, allowing them to summon animals, control plants, and transform into various creatures.
10	Sorcerer	A spellcaster who draws power from an innate magical source, often a gift from birth. Sorcerers rely on their natural talent and instinct to cast spells, rather than the studied approach of a mage.
11	Warlock	A wielder of dark magic, bound by a pact with an otherworldly being. Warlocks gain their power through bargains with mysterious entities, allowing them to cast spells and summon otherworldly creatures.
12	Barbarian	A fierce and powerful warrior driven by rage. Barbarians tap into their primal fury to deliver devastating attacks and withstand significant damage, making them formidable opponents in battle.
13	Necromancer	A master of death magic, able to raise and control the dead. Necromancers manipulate the forces of life and death, summoning undead minions and draining the life force from their enemies.
14	Knight	A noble and armored fighter, skilled in combat and chivalry. Knights adhere to a code of honor and duty, excelling in mounted combat and using their training to defend the weak and uphold justice.
15	Assassin	A deadly and elusive killer, trained in the arts of stealth and elimination. Assassins use their skills to silently dispatch targets, often employing poison, traps, and quick, precise strikes to achieve their objectives.
\.


--
-- Data for Name: class_uses_attack_pool; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.class_uses_attack_pool (class_id, attack_pool_id) FROM stdin;
1	20
1	25
12	20
12	26
14	20
14	27
2	21
2	25
13	21
13	26
10	21
10	27
9	22
9	25
8	22
8	26
7	22
7	27
5	23
5	25
3	23
3	26
15	23
15	27
4	24
4	25
11	24
11	26
6	24
6	27
\.


--
-- Data for Name: has; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.has (stat_id, item_id, amount) FROM stdin;
8	1	5
9	1	3
10	1	2
11	2	7
12	2	4
8	3	4
11	3	6
12	3	8
13	4	2
14	4	1
11	5	5
15	5	8
10	6	10
12	7	6
13	7	7
15	8	3
14	9	5
11	10	8
12	10	3
11	11	4
16	11	6
16	12	8
8	13	9
13	13	4
9	14	7
10	14	2
17	15	6
18	15	3
13	16	7
14	16	5
15	16	9
16	17	2
18	17	4
18	18	6
12	19	9
16	19	1
19	20	10
10	21	3
11	21	1
12	22	8
13	22	2
9	23	5
14	23	3
15	24	7
13	25	3
14	25	6
10	26	5
16	26	7
11	27	6
17	27	2
18	28	4
12	29	2
13	29	5
16	30	3
14	31	7
15	31	9
11	32	4
15	32	7
8	33	7
9	33	4
10	34	6
13	34	3
14	35	8
16	35	5
15	36	2
11	37	5
16	37	9
10	38	4
11	38	1
12	38	6
13	39	7
17	39	4
9	40	8
18	40	2
\.


--
-- Data for Name: item; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.item (item_id, item_name, item_description, item_level, equippable, item_rarity) FROM stdin;
1	Bacon Helm	A helmet made entirely of crispy bacon. Surprisingly sturdy and delicious.	5	1	2
2	Wizard Hat	A pointy hat that makes you look incredibly wise. Or silly. Depends on who you ask.	3	1	1
3	Cloak of Invisibility	A cloak that turns you invisible. Or maybe it is just really good at blending in.	8	2	3
4	Rubber Chicken	A classic prank item that doubles as a weapon. Not very effective, but legendary.	1	0	4
5	Boots of Speed	These boots make you run faster than a speeding tortoise. Maybe.	6	3	1
6	Potion of Laughter	Causes uncontrollable laughter in anyone who drinks it. Great for parties.	2	0	0
7	Epic Beard	A fake beard that gives you the wisdom of a thousand sages. Or so it claims.	10	1	3
8	Sword of Whimsy	A brightly colored sword that makes whimsical sounds with every swing.	4	0	2
9	Cheese Shield	A shield made from the finest aged cheese. Surprisingly effective and tasty.	7	2	1
10	Pants of Power	These pants give you the confidence to tackle any challenge. And they look good too.	5	3	2
11	Socks of Stealth	Wearing these socks makes you silent as a ninja. Or so you hope.	3	3	1
12	Gloves of Jazz Hands	Gloves that make you spontaneously break into jazz hands. Very entertaining.	9	2	0
13	Helmet of Horrors	A helmet that makes you look terrifying. Perfect for scaring your enemies.	12	1	4
14	Tunic of Tranquility	A tunic that makes you feel calm and peaceful. Great for meditation.	8	2	2
15	Belt of Bananas	A belt that holds a bunch of bananas. Useful for quick snacks.	4	2	0
16	Cape of Capes	A cape that has tiny capes attached to it. Cape-ception.	14	2	3
17	Shoes of Silence	Shoes that make your footsteps completely silent. Sneaky.	9	3	2
18	Ring of Ridiculousness	A ring that makes everything you say sound absurd. Fun at parties.	5	0	1
19	Glasses of Genius	Glasses that make you look incredibly smart. And maybe a bit pretentious.	6	2	1
20	Loincloth of Legends	A legendary loincloth that is said to grant great power. Or just great embarrassment.	15	3	4
21	Dancing Banana	A banana that dances when music plays. Sure to bring joy and confusion.	1	0	1
22	Singing Fish	A mounted fish that sings whenever someone passes by. Great for pranks.	3	0	2
23	Glowing Underpants	Underpants that glow in the dark. Perfect for night-time emergencies.	5	0	3
24	Giant Rubber Duck	A massive rubber duck that floats in your bathtub. Requires a very big bathtub.	7	0	1
25	Exploding Pie	A pie that explodes with confetti and laughter when sliced. Perfect for celebrations.	1	0	2
26	Inflatable Unicorn	An inflatable unicorn that doubles as a comfortable chair. Magical and whimsical.	11	0	3
27	Screaming Pillow	A pillow that screams loudly whenever someone lays their head on it. Guaranteed to startle.	13	0	1
28	Chuckling Stick	A stick that chuckles softly when waved around. Adds humor to any situation.	1	0	2
29	Talking Plant	A plant that talks and gives gardening advice. A green thumb's best friend.	4	0	3
30	Giggling Mirror	A mirror that giggles whenever someone looks into it. Reflects your mood.	6	0	1
31	Realistic-Looking-Steak Cake	A cake made to look like a juicy steak. Surprise your guests with this dessert!	1	0	2
32	Glow-in-the-Dark Socks	Socks that glow brightly in the dark. Keep track of your feet in low-light situations.	10	0	3
33	Singing Sword	A sword that sings battle hymns when unsheathed. Boosts morale in combat.	12	0	1
34	Talking Toilet	A toilet that offers encouraging words after each use. Surprisingly motivational.	14	0	2
35	Whoopee Cushion Throne	A throne that functions like a giant whoopee cushion. A royal prankster's dream.	15	0	3
36	Remote-Controlled Fart Machine	A device that emits various hilarious fart noises on command. Endless amusement.	1	0	1
37	Glowing Juggling Balls	Balls that glow brightly while being juggled. Adds a colorful twist to circus acts.	3	0	2
38	Self-Flipping Pancake	A pancake that flips itself perfectly in the air. Breakfast made entertaining.	1	0	3
39	Trolling Trombone	A trombone that plays prank sounds instead of music notes. Musical mischief.	7	0	1
40	Laughing Couch	A couch that laughs softly whenever someone sits on it. Comfort and entertainment combined.	9	0	2
\.


--
-- Data for Name: item_rarity; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.item_rarity (rarity_id, name, drop_factor) FROM stdin;
0	common	25
1	uncommon	16
2	rare	9
3	epic	4
4	legendary	1
\.


--
-- Data for Name: location; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.location (loc_id, loc_name, loc_level, loc_description) FROM stdin;
0	Green Leaf Town	0	A cute little village, where travellers buy all sorts of herbs and berries.
1	Sunset Valley	1	A beautiful valley where the sun sets in a breathtaking display of colors.
2	Moonlit Grove	2	A mysterious grove that is always illuminated by the soft glow of the moon.
3	Eldertree Forest	3	A dense forest filled with ancient trees and hidden secrets.
4	Crystal Lake	4	A pristine lake with water so clear it looks like crystal.
5	Dragon\\u2019s Peak	5	A high mountain peak known to be the home of legendary dragons.
6	Whispering Woods	6	A forest where the trees are said to whisper secrets to those who listen.
7	Blossom Fields	7	Fields that are always in bloom with a variety of beautiful flowers.
8	Stormy Highlands	8	Highlands that are frequently struck by fierce storms and lightning.
9	Shimmering Sands	9	A desert with sand that sparkles under the sun, creating a shimmering effect.
10	Mystic Marsh	10	A marshland filled with mystical creatures and enchanted waters.
11	Golden Meadow	11	A vast meadow that glows with a golden hue under the sunlight.
12	Haunted Hollow	12	A hollow that is rumored to be haunted by spirits and ghosts.
13	Silver Shore	13	A beach with sand that looks like silver, especially under the moonlight.
14	Emerald Glade	14	A glade with lush greenery and emerald-colored plants.
15	Frostwind Hamlet	15	A small hamlet that is perpetually covered in frost and snow.
16	Everbright Hollow	17	A secluded valley known for its glowing plants.
17	Whispering Pines	18	A picturesque forest where the trees gently whisper in the wind.
18	Silvershore Bay	19	An idyllic bay with silvery sparkling water and white sandy beaches.
19	Misty Peaks Sanctuary	20	A sacred place in the mist-covered mountains surrounded by many legends.
\.


--
-- Data for Name: stats; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.stats (stat_id, stat_name, stat_description) FROM stdin;
8	Strength	Influences the physical damage dealt by a character.
9	Health	The maximum number of hit points a character has.
10	Mana	The maximum number of mana points a character can use for spells.
11	Dexterity	Influences the hit chance and dodge rate of a character.
12	Intelligence	Influences the power of spells and magical abilities.
13	Willpower	Influences resistance to magical attacks and status effects.
14	Armor	Reduces physical damage taken.
15	Critical Hit Chance	The probability that an attack will critically hit and deal additional damage.
16	Critical Hit Damage	The additional damage dealt on a critical hit.
17	Wielding	Increases the speed of your attacks
18	Luck	Influences random events such as critical hits and loot quality.
19	Cosmic Blessing	Increases other stats by a small amount.
\.


--
-- Name: Battlelog_battle_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public."Battlelog_battle_id_seq"', 79, true);


--
-- Name: Location_loc_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public."Location_loc_id_seq"', 19, true);


--
-- Name: attack_attack_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.attack_attack_id_seq', 1, false);


--
-- Name: attack_pool_attack_pool_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.attack_pool_attack_pool_id_seq', 36, true);


--
-- Name: item_rarity_rarity_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.item_rarity_rarity_id_seq', 1, false);


--
-- Name: stats_stat_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.stats_stat_id_seq', 19, true);


--
-- Name: battlelog Battlelog_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.battlelog
    ADD CONSTRAINT "Battlelog_pkey" PRIMARY KEY (battle_id);


--
-- Name: class Class_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.class
    ADD CONSTRAINT "Class_pkey" PRIMARY KEY (class_id);


--
-- Name: item Item_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.item
    ADD CONSTRAINT "Item_pkey" PRIMARY KEY (item_id);


--
-- Name: location Location_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.location
    ADD CONSTRAINT "Location_pkey" PRIMARY KEY (loc_id);


--
-- Name: stats Stats_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.stats
    ADD CONSTRAINT "Stats_pkey" PRIMARY KEY (stat_id);


--
-- Name: character User_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."character"
    ADD CONSTRAINT "User_pkey" PRIMARY KEY (user_id);


--
-- Name: attack attack_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.attack
    ADD CONSTRAINT attack_pkey PRIMARY KEY (attack_id);


--
-- Name: attack_pool_contains_attack attack_pool_contains_attack_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.attack_pool_contains_attack
    ADD CONSTRAINT attack_pool_contains_attack_pkey PRIMARY KEY (attack_pool_id, attack_id);


--
-- Name: attack_pool attack_pool_pk; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.attack_pool
    ADD CONSTRAINT attack_pool_pk PRIMARY KEY (attack_pool_id);


--
-- Name: attack_scales_with attack_scales_with_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.attack_scales_with
    ADD CONSTRAINT attack_scales_with_pkey PRIMARY KEY (attack_id, stat_id, damage_type);


--
-- Name: class_uses_attack_pool class_uses_attack_pool_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.class_uses_attack_pool
    ADD CONSTRAINT class_uses_attack_pool_pkey PRIMARY KEY (class_id, attack_pool_id);


--
-- Name: has has_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.has
    ADD CONSTRAINT has_pkey PRIMARY KEY (stat_id, item_id);


--
-- Name: item_rarity item_rarity_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.item_rarity
    ADD CONSTRAINT item_rarity_pkey PRIMARY KEY (rarity_id);


--
-- Name: owns owns_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.owns
    ADD CONSTRAINT owns_pkey PRIMARY KEY (item_id, user_id);


--
-- Name: fki_battlelog_initiator_id_fkey; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX fki_battlelog_initiator_id_fkey ON public.battlelog USING btree (initiator_id);


--
-- Name: fki_battlelog_opponent_id_fkey; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX fki_battlelog_opponent_id_fkey ON public.battlelog USING btree (opponent_id);


--
-- Name: fki_has_item_id_fkey; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX fki_has_item_id_fkey ON public.has USING btree (item_id);


--
-- Name: fki_has_stat_id_fkey; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX fki_has_stat_id_fkey ON public.has USING btree (stat_id);


--
-- Name: fki_user_loc_id_fkey; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX fki_user_loc_id_fkey ON public."character" USING btree (located);


--
-- Name: attack_pool_contains_attack attack_pool_contains_attack_attack_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.attack_pool_contains_attack
    ADD CONSTRAINT attack_pool_contains_attack_attack_id_fkey FOREIGN KEY (attack_id) REFERENCES public.attack(attack_id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: attack_pool_contains_attack attack_pool_contains_attack_attack_pool_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.attack_pool_contains_attack
    ADD CONSTRAINT attack_pool_contains_attack_attack_pool_id_fkey FOREIGN KEY (attack_pool_id) REFERENCES public.attack_pool(attack_pool_id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: attack_scales_with attack_scales_with_attack_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.attack_scales_with
    ADD CONSTRAINT attack_scales_with_attack_id_fkey FOREIGN KEY (attack_id) REFERENCES public.attack(attack_id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: attack_scales_with attack_scales_with_stat_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.attack_scales_with
    ADD CONSTRAINT attack_scales_with_stat_id_fkey FOREIGN KEY (stat_id) REFERENCES public.stats(stat_id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: battlelog battlelog_initiator_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.battlelog
    ADD CONSTRAINT battlelog_initiator_id_fkey FOREIGN KEY (initiator_id) REFERENCES public."character"(user_id) ON DELETE CASCADE;


--
-- Name: battlelog battlelog_opponent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.battlelog
    ADD CONSTRAINT battlelog_opponent_id_fkey FOREIGN KEY (opponent_id) REFERENCES public."character"(user_id) ON DELETE CASCADE;


--
-- Name: class_uses_attack_pool class_uses_attack_pool_attack_pool_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.class_uses_attack_pool
    ADD CONSTRAINT class_uses_attack_pool_attack_pool_id_fkey FOREIGN KEY (attack_pool_id) REFERENCES public.attack_pool(attack_pool_id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: class_uses_attack_pool class_uses_attack_pool_class_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.class_uses_attack_pool
    ADD CONSTRAINT class_uses_attack_pool_class_id_fkey FOREIGN KEY (class_id) REFERENCES public.class(class_id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: has has_item_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.has
    ADD CONSTRAINT has_item_id_fkey FOREIGN KEY (item_id) REFERENCES public.item(item_id);


--
-- Name: has has_stat_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.has
    ADD CONSTRAINT has_stat_id_fkey FOREIGN KEY (stat_id) REFERENCES public.stats(stat_id);


--
-- Name: item item_item_rarity_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.item
    ADD CONSTRAINT item_item_rarity_fkey FOREIGN KEY (item_rarity) REFERENCES public.item_rarity(rarity_id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: owns owns_item_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.owns
    ADD CONSTRAINT owns_item_id_fkey FOREIGN KEY (item_id) REFERENCES public.item(item_id);


--
-- Name: owns owns_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.owns
    ADD CONSTRAINT owns_user_id_fkey FOREIGN KEY (user_id) REFERENCES public."character"(user_id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: character user_class_id_fke; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."character"
    ADD CONSTRAINT user_class_id_fke FOREIGN KEY (class) REFERENCES public.class(class_id);


--
-- Name: character user_loc_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."character"
    ADD CONSTRAINT user_loc_id_fkey FOREIGN KEY (located) REFERENCES public.location(loc_id);


--
-- PostgreSQL database dump complete
--

